<?php

namespace WezomCms\Core\ExtendPackage;

use Lang;
use Mcamara\LaravelLocalization\Exceptions\UnsupportedLocaleException;
use Schema;
use WezomCms\Core\Foundation\Helpers;
use WezomCms\Languages\LanguagesServiceProvider;

class LaravelLocalization extends \Mcamara\LaravelLocalization\LaravelLocalization
{
    protected $switchingLinks;

    /**
     * LaravelLocalization constructor.
     * @throws UnsupportedLocaleException
     * @throws \Mcamara\LaravelLocalization\Exceptions\SupportedLocalesNotDefined
     */
    public function __construct()
    {
        $this->app = app();

        $this->configRepository = $this->app['config'];
        $this->view = $this->app['view'];
        $this->translator = $this->app['translator'];
        $this->router = $this->app['router'];
        $this->request = $this->app['request'];
        $this->url = $this->app['url'];

        $this->setLocales();
    }

    /**
     * Returns the translation key for a given path.
     *
     * @return bool Returns value of hideDefaultLocaleInURL in config.
     */
    public function hideDefaultLocaleInURL()
    {
        return true;
    }

    /**
     * @return array
     * @throws \Mcamara\LaravelLocalization\Exceptions\SupportedLocalesNotDefined
     * @throws \Mcamara\LaravelLocalization\Exceptions\UnsupportedLocaleException
     */
    public function getSwitchingLinks(): array
    {
        if (null !== $this->switchingLinks && count($this->switchingLinks)) {
            $links = $this->transformLinks($this->switchingLinks);

            return $this->getOrderedSwitchingLinks($links);
        }

        // Generate links using default package functionality
        $autoGeneratedLinks = [];
        foreach ($this->getLocalesOrder() as $locale => $language) {
            $autoGeneratedLinks[$locale] = $this->getLocalizedURL($locale, null, []);
        }

        return $this->transformLinks($autoGeneratedLinks);
    }

    /**
     * @param $locale
     * @param $url
     * @return LaravelLocalization
     */
    public function addSwitchingLink($locale, $url): LaravelLocalization
    {
        $this->switchingLinks[$locale] = $url;

        return $this;
    }

    /**
     * @param  array  $switchingLinks
     */
    public function setSwitchingLinks(array $switchingLinks): void
    {
        $this->switchingLinks = $switchingLinks;
    }

    /**
     * @param $locale
     * @return $this
     */
    public function setDefaultLocale($locale)
    {
        $this->defaultLocale = $locale;

        return $this;
    }

    /**
     * @param  array  $links
     * @return array
     */
    private function getOrderedSwitchingLinks(array $links)
    {
        $order = $this->configRepository->get('laravellocalization.localesOrder');

        uksort($links, function ($a, $b) use ($order) {
            $pos_a = array_search($a, $order);
            $pos_b = array_search($b, $order);

            return $pos_a - $pos_b;
        });

        return $links;
    }

    /**
     * @param  array  $switchingLinks
     * @return array
     * @throws \Mcamara\LaravelLocalization\Exceptions\SupportedLocalesNotDefined
     * @throws UnsupportedLocaleException
     */
    private function transformLinks(array $switchingLinks): array
    {
        $locales = $this->getLocalesOrder();

        $result = [];
        foreach ($locales as $locale => $languageRow) {
            if (!$this->checkLocaleInSupportedLocales($locale)) {
                throw new UnsupportedLocaleException('Locale \'' . $locale . '\' is not in the list of supported locales.');
            }

            if (array_key_exists($locale, $switchingLinks)) {
                $languageRow['url'] = $switchingLinks[$locale];
                $languageRow['active'] = app()->getLocale() === $locale;

                $result[$locale] = $languageRow;
            }
        }

        return $result;
    }

    /**
     * @throws UnsupportedLocaleException
     * @throws \Mcamara\LaravelLocalization\Exceptions\SupportedLocalesNotDefined
     */
    private function setLocales()
    {
        if (
            Helpers::providerLoaded(LanguagesServiceProvider::class)
            && Schema::hasTable('languages')
        ) {
            $query = \WezomCms\Languages\Models\Language::orderBy('sort')->orderBy('id');

            if (!app('isBackend')) {
                $query->published();
            }

            $languages = $query->get();

            $langArray = [];
            $default = null;
            foreach ($languages as $language) {
                $langArray[$language->alias] = [
                    'name' => $language->name,
                    'native' => $language->native_name,
                    'regional' => $language->region,
                    'script' => 'Latn',
                ];

                if ($language->default) {
                    $default = $language->alias;
                }
            }

            if ($langArray) {
                $this->setSupportedLocales($langArray);
                config()->set('laravellocalization.localesOrder', array_keys($langArray));
                // Set default language
                if (!$default) {
                    reset($langArray);
                    $default = key($langArray);
                }
                $this->setDefaultLocale($default);
                Lang::setFallback($default);
            }
        } else {
            // set default locale
            $this->defaultLocale = $this->configRepository->get('app.locale');
            $supportedLocales = $this->getSupportedLocales();

            if (empty($supportedLocales[$this->defaultLocale])) {
                throw new UnsupportedLocaleException('Laravel default locale is not in the supportedLocales array.');
            }
        }
    }
}
